// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"code.cloudfoundry.org/routing-api/db"
	"github.com/jinzhu/gorm"
)

type FakeClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	CreateStub        func(value interface{}) *gorm.DB
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		value interface{}
	}
	createReturns struct {
		result1 *gorm.DB
	}
	DeleteStub        func(value interface{}, where ...interface{}) *gorm.DB
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		value interface{}
		where []interface{}
	}
	deleteReturns struct {
		result1 *gorm.DB
	}
	SaveStub        func(value interface{}) *gorm.DB
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		value interface{}
	}
	saveReturns struct {
		result1 *gorm.DB
	}
	UpdateStub        func(attrs ...interface{}) *gorm.DB
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		attrs []interface{}
	}
	updateReturns struct {
		result1 *gorm.DB
	}
	WhereStub        func(query interface{}, args ...interface{}) *gorm.DB
	whereMutex       sync.RWMutex
	whereArgsForCall []struct {
		query interface{}
		args  []interface{}
	}
	whereReturns struct {
		result1 *gorm.DB
	}
	FirstStub        func(out interface{}, where ...interface{}) *gorm.DB
	firstMutex       sync.RWMutex
	firstArgsForCall []struct {
		out   interface{}
		where []interface{}
	}
	firstReturns struct {
		result1 *gorm.DB
	}
	FindStub        func(out interface{}, where ...interface{}) *gorm.DB
	findMutex       sync.RWMutex
	findArgsForCall []struct {
		out   interface{}
		where []interface{}
	}
	findReturns struct {
		result1 *gorm.DB
	}
}

func (fake *FakeClient) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeClient) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Create(value interface{}) *gorm.DB {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		value interface{}
	}{value})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(value)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeClient) CreateArgsForCall(i int) interface{} {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].value
}

func (fake *FakeClient) CreateReturns(result1 *gorm.DB) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) Delete(value interface{}, where ...interface{}) *gorm.DB {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		value interface{}
		where []interface{}
	}{value, where})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(value, where...)
	} else {
		return fake.deleteReturns.result1
	}
}

func (fake *FakeClient) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeClient) DeleteArgsForCall(i int) (interface{}, []interface{}) {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].value, fake.deleteArgsForCall[i].where
}

func (fake *FakeClient) DeleteReturns(result1 *gorm.DB) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) Save(value interface{}) *gorm.DB {
	fake.saveMutex.Lock()
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		value interface{}
	}{value})
	fake.saveMutex.Unlock()
	if fake.SaveStub != nil {
		return fake.SaveStub(value)
	} else {
		return fake.saveReturns.result1
	}
}

func (fake *FakeClient) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeClient) SaveArgsForCall(i int) interface{} {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return fake.saveArgsForCall[i].value
}

func (fake *FakeClient) SaveReturns(result1 *gorm.DB) {
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) Update(attrs ...interface{}) *gorm.DB {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		attrs []interface{}
	}{attrs})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(attrs...)
	} else {
		return fake.updateReturns.result1
	}
}

func (fake *FakeClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeClient) UpdateArgsForCall(i int) []interface{} {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].attrs
}

func (fake *FakeClient) UpdateReturns(result1 *gorm.DB) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) Where(query interface{}, args ...interface{}) *gorm.DB {
	fake.whereMutex.Lock()
	fake.whereArgsForCall = append(fake.whereArgsForCall, struct {
		query interface{}
		args  []interface{}
	}{query, args})
	fake.whereMutex.Unlock()
	if fake.WhereStub != nil {
		return fake.WhereStub(query, args...)
	} else {
		return fake.whereReturns.result1
	}
}

func (fake *FakeClient) WhereCallCount() int {
	fake.whereMutex.RLock()
	defer fake.whereMutex.RUnlock()
	return len(fake.whereArgsForCall)
}

func (fake *FakeClient) WhereArgsForCall(i int) (interface{}, []interface{}) {
	fake.whereMutex.RLock()
	defer fake.whereMutex.RUnlock()
	return fake.whereArgsForCall[i].query, fake.whereArgsForCall[i].args
}

func (fake *FakeClient) WhereReturns(result1 *gorm.DB) {
	fake.WhereStub = nil
	fake.whereReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) First(out interface{}, where ...interface{}) *gorm.DB {
	fake.firstMutex.Lock()
	fake.firstArgsForCall = append(fake.firstArgsForCall, struct {
		out   interface{}
		where []interface{}
	}{out, where})
	fake.firstMutex.Unlock()
	if fake.FirstStub != nil {
		return fake.FirstStub(out, where...)
	} else {
		return fake.firstReturns.result1
	}
}

func (fake *FakeClient) FirstCallCount() int {
	fake.firstMutex.RLock()
	defer fake.firstMutex.RUnlock()
	return len(fake.firstArgsForCall)
}

func (fake *FakeClient) FirstArgsForCall(i int) (interface{}, []interface{}) {
	fake.firstMutex.RLock()
	defer fake.firstMutex.RUnlock()
	return fake.firstArgsForCall[i].out, fake.firstArgsForCall[i].where
}

func (fake *FakeClient) FirstReturns(result1 *gorm.DB) {
	fake.FirstStub = nil
	fake.firstReturns = struct {
		result1 *gorm.DB
	}{result1}
}

func (fake *FakeClient) Find(out interface{}, where ...interface{}) *gorm.DB {
	fake.findMutex.Lock()
	fake.findArgsForCall = append(fake.findArgsForCall, struct {
		out   interface{}
		where []interface{}
	}{out, where})
	fake.findMutex.Unlock()
	if fake.FindStub != nil {
		return fake.FindStub(out, where...)
	} else {
		return fake.findReturns.result1
	}
}

func (fake *FakeClient) FindCallCount() int {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return len(fake.findArgsForCall)
}

func (fake *FakeClient) FindArgsForCall(i int) (interface{}, []interface{}) {
	fake.findMutex.RLock()
	defer fake.findMutex.RUnlock()
	return fake.findArgsForCall[i].out, fake.findArgsForCall[i].where
}

func (fake *FakeClient) FindReturns(result1 *gorm.DB) {
	fake.FindStub = nil
	fake.findReturns = struct {
		result1 *gorm.DB
	}{result1}
}

var _ db.Client = new(FakeClient)
